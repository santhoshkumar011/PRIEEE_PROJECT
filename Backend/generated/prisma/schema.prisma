generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:KelavanSanjeev@db.ssprduchehvivlehaqkm.supabase.co:5432/postgres"
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
}

enum OTPStatus {
  VERIFIED
  PENDING
}

model Auth {
  id    Int    @id @default(autoincrement())
  email String @unique
  salt  String
  hash  String

  manager ProjectManager?
  leader  TeamLeader?
  dev     Developer?
}

model ProjectManager {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  lastLogin   DateTime?
  lastLogout  DateTime?
  authId      Int          @unique
  auth        Auth         @relation(fields: [authId], references: [id])
  projects    Project[]    @relation("ManagerProjects")
  teamLeaders TeamLeader[] // ðŸ‘ˆ 1-to-many with TeamLeader
  session     Session?
  otp         Otp?
}

model TeamLeader {
  id         Int            @id @default(autoincrement())
  username   String         @unique
  lastLogin  DateTime?
  lastLogout DateTime?
  authId     Int            @unique
  auth       Auth           @relation(fields: [authId], references: [id])
  projects   Project[]      @relation("LeaderProjects")
  managerId  Int // ðŸ‘ˆ FK to ProjectManager
  manager    ProjectManager @relation(fields: [managerId], references: [id])
  developers Developer[] // ðŸ‘ˆ 1-to-many with Developer
  session    Session?
  otp        Otp?
}

model Developer {
  id           Int        @id @default(autoincrement())
  username     String     @unique
  lastLogin    DateTime?
  lastLogout   DateTime?
  authId       Int        @unique
  auth         Auth       @relation(fields: [authId], references: [id])
  tasks        Task[]
  teamLeaderId Int // ðŸ‘ˆ FK to TeamLeader
  teamLeader   TeamLeader @relation(fields: [teamLeaderId], references: [id])
  session      Session?
  otp          Otp?
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  storyPoints Int?
  status      ProjectStatus @default(NOT_STARTED)
  createdAt   DateTime      @default(now())

  managerId Int
  leaderId  Int

  manager    ProjectManager @relation("ManagerProjects", fields: [managerId], references: [id])
  teamLeader TeamLeader     @relation("LeaderProjects", fields: [leaderId], references: [id])

  tasks Task[]
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  updatedAt   DateTime   @default(now())

  projectId   Int
  developerId Int

  project   Project   @relation(fields: [projectId], references: [id])
  developer Developer @relation(fields: [developerId], references: [id])
}

model Session {
  id      Int      @id @default(autoincrement())
  session String
  expiry  DateTime

  managerId   Int? @unique
  leaderId    Int? @unique
  developerId Int? @unique

  manager   ProjectManager? @relation(fields: [managerId], references: [id])
  leader    TeamLeader?     @relation(fields: [leaderId], references: [id])
  developer Developer?      @relation(fields: [developerId], references: [id])
}

model Otp {
  id     Int       @id @default(autoincrement())
  otp    String
  expiry DateTime
  status OTPStatus @default(PENDING)

  managerId   Int? @unique
  leaderId    Int? @unique
  developerId Int? @unique

  manager   ProjectManager? @relation(fields: [managerId], references: [id])
  leader    TeamLeader?     @relation(fields: [leaderId], references: [id])
  developer Developer?      @relation(fields: [developerId], references: [id])
}
